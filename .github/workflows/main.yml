name: 'pr-checks'

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - main
      - develop

env:
  VAULT_URL: https://vault.domain.com:8200

jobs:
  find-commit-in-develop:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch origin develop
          echo "Checking if commit ${GITHUB_SHA} is in develop"
          if [ -z "$(git branch -r origin/develop --contains ${{ github.event.pull_request.head.sha }})" ]; then
              echo "No commits in develop branch" >&2
              exit 1
          else
              echo "Commits in develop - Check Passed"
          fi        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}      

  enforce-branching-rules:
    name: Ensure proper branching rules
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Ensure develop is up-to-date before merging to main
        run: |
          git fetch origin
          if [ "$(git rev-parse develop)" != "$(git merge-base develop main)" ]; then
              echo "Feature branch must be merged into develop before merging to main"
              exit 1
          fi

  protect-develop:
    name: Protect develop from invalid pushes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Ensure no direct pushes to develop after rebase
        run: |
          git fetch origin
          if [ "$(git rev-parse HEAD)" != "$(git rev-parse origin/develop)" ]; then
              echo "You cannot push directly to develop after rebasing. Please recreate your local develop branch."
              exit 1
          fi

  check-black-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  

      - name: Get changed py-files
        id: changed-files
        uses: tj-actions/changed-files@v14.6
        with:
          files: |
            containers/*/.py
            dags/*/.py
            ml_pipeline/*/.py

      - name: Install Black
        run: |
          pip3 install black==22.8.0

      - name: Check format
        run: |
          if [ -z "${{ steps.changed-files.outputs.all_changed_files }}" ]; then
              echo "No Python files in the commit"
          else                
              echo "Python files in the commit"
              for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
                  black --check --diff --line-length=79 "$file" || exit 1
              done    
          fi
